<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd">
		
		<!-- authprovider에서 userdetailservice를 사용해야 하기 때문에 여기에 userdetailservice 클래스가 있는 패키지를
		스캔하도록 설정해 주어야 한다.  -->
		<context:component-scan base-package="com.biz.book.service.auth"/>
		
		<!-- 권한 검사 할때 prefix 설정하는 클래스 bean -->
		<!-- 이 클래스를 bean으로 설정하면서 construct-arg value="" prefix 제거하는 효과 -->
		<!-- 시큐리티 버전마다 조금 차이가 있어서 설정값이 적용이 안되는 경우가 있다 -->
		<!-- 보통은 설정하지 않고 기본값으로 접두어를 붙여 사용한다 : ROLE_ADMIN -->
		
		<!--org.springframework.security.config.core.GrantedAuthorityDefaults-->
		<bean class="org.springframework.security.config.core.GrantedAuthorityDefaults">
			<constructor-arg value="ROLE_"></constructor-arg>
		</bean>

	<!-- spring security에서 사용할 AuthenticationProvider를 구현한 클래스를  bean 으로 등록 -->
	<bean id="customAuthProvider" class="com.biz.book.auth.AuthorProviderImpl"/>
	
	<!-- 커스터마이징 된 AuthorProvider를 spring security에서 사용하도록 security:authentication -manager에 등록 -->
	<security:authentication-manager>
		<security:authentication-provider ref="customAuthProvider"/>
	</security:authentication-manager>


	<!-- spring security 의 핵심설정 부분 -->
	<!-- security:http 설정이 중요! -->
	
	<!-- 로그인 form 설정 -->
	<!-- 로그인 방법 설정 -->
	<!-- 로그인이 되었을 때 인가, 권한에 관한 설정 -->
	<!-- 로그인 되었을 때 url 패턴에 따라 접근 권한을 세밀하게 부여할 수 있다
	이때 사용하는 것이 security:intercept 기능이다 접근할 url을 패턴속성에 지정하고 접근할 권한이 있는가를 검사하도록 access속성에 지정한다 -->
	
	
	<!-- 패턴 지정에서 주의할 사항 -->
	<!-- 패턴은 url의 단계가 깊을수록 위쪽에 먼저 작성을 해 주어야 한다.
	만약 user/**, user/a/b/c 순서로 패턴이 있을 경우 user/a/b/c는 무시된다. 이때는 user/a/b/c, user/**순서로 패턴을 나열해야 한다.  -->
	<security:http auto-config="true" use-expressions="true"> <!--내가 설정한 것 이외에 자동으로 만들어달라
		이걸 써야 hasanyrole 쓸수가 있음
	 -->
	 	<!-- disable 속성을 true로 설정하면 POST 전송 시 token 을 첨부하지 않아도사용가능하도록 한다
	 	단, 이 방법은 다른 API와 연동할 때를 제외하고 사용하지 않는 것이 좋다. 
	 	기본값은 항상 disable=false로 설정한다 -->
	 	<security:csrf disabled="false"/>
	 	
		<security:form-login username-parameter="username" password-parameter="password"/>
		<security:logout logout-url="/logout" logout-success-url="/" invalidate-session="true"/>
		
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/> <!-- 패턴에 따라 권한을 부여 
		admin으로 시작하면 관리자 권한으로 접근하는 것을 알게 됨 
		로그인할 사용자의 권한이 ADMIN일 때만!! 접근하게 해라 -->
		<security:intercept-url pattern="/member/mypage" access="hasAnyRole('ROLE_ADMIN','USER')"/>
		<security:intercept-url pattern="/member/password" access="hasAnyRole('ROLE_ADMIN','USER')"/> <!-- 자신과 관리자가 비번 변경권한 있음 -->
		<security:intercept-url pattern="/member/**" access="permitAll()"/> <!-- mypage password 패턴이 아닌경우 누구나 접근가능 
		이걸 맨 위에 올리면 위에 두 조건이 무시됨 가장 복잡하고 긴 조긴이 맨 위에 와야한다 -->
		
		<security:intercept-url pattern="/books/**" access="hasAnyRole('ROLE_ADMIN','USER')"/>
		<security:intercept-url pattern="/**" access="permitAll()"/> <!-- 위에 설정한것 빼고 나머지! 는 허용한다 -->
	</security:http>
	
	<!-- 회원가입, 로그인에서 사용자의 비밀번호를 암호화 하기 위하여 암호화 도구를 bean 으로 설정  -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg value="4" index="0"/>
	</bean>
	
</beans>






